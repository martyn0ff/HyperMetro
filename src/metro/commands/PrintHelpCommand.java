package metro.commands;

import metro.Main;

public class PrintHelpCommand implements Command {
    @Override
    public void execute(String[] args) {
        System.out.println("*** HyperMetro v1.11 by Roman Martynoff ***");
        System.out.println();
        System.out.println("All metro lines and stations names are case-sensitive. If metro line or station contains spaces, encapsulate it in double quotes, e.g. \"Warren Street\".");
        System.out.println();
        System.out.println("List of available commands:");
        System.out.println();
        System.out.println("--------------------");
        System.out.println("DATA IMPORT / EXPORT");
        System.out.println("--------------------");
        System.out.println();
        System.out.println(String.join(", ", Command.shorthands.get("loadmetro")));
        System.out.println("- Load metro from a file in data/ folder. Enforce connectivity flag ensures there are no one-sided connections in file. Possible values: true, false.");
        System.out.println("Usage: " + Main.COMMAND_PREFIX + "loadmetro <file name> <enforce connectivity flag>");
        System.out.println();
        System.out.println(String.join(", ", Command.shorthands.get("savemetro")));
        System.out.println("- Save metro to data/ folder. If folder doesn't exist, it will be created.");
        System.out.println("Usage: " + Main.COMMAND_PREFIX + "savemetro <file name>");
        System.out.println();
        System.out.println(String.join(", ", Command.shorthands.get("exit")));
        System.out.println("- Exit program.");
        System.out.println("Usage: " + Main.COMMAND_PREFIX + "exit");
        System.out.println();
        System.out.println("---------------------");
        System.out.println("METRO STATION CONTROL");
        System.out.println("---------------------");
        System.out.println();
        System.out.println(String.join(", ", Command.shorthands.get("append")));
        System.out.println("- Append (add as head) new station to a metro line. A head is a metro station that doesn't have any next stations.");
        System.out.println("Usage: " + Main.COMMAND_PREFIX + "append <line name> <station name> <time>");
        System.out.println();
        System.out.println(String.join(", ", Command.shorthands.get("prepend")));
        System.out.println("- Prepend (add as tail) new station to a metro line. A tail is a metro station that doesn't have any previous stations.");
        System.out.println("Usage: " + Main.COMMAND_PREFIX + "prepend <line name> <station name> <time>");
        System.out.println();
        System.out.println(String.join(", ", Command.shorthands.get("enable")));
        System.out.println("- Enable metro station for use (stop maintenance).");
        System.out.println("Usage: " + Main.COMMAND_PREFIX + "enable <line name> <station name>");
        System.out.println();
        System.out.println(String.join(", ", Command.shorthands.get("disable")));
        System.out.println("- Disable metro station for use (start maintenance). Routes calculation commands won't use this station when it's disabled.");
        System.out.println("Usage: " + Main.COMMAND_PREFIX + "disable <line name> <station name>");
        System.out.println();
        System.out.println("-----------");
        System.out.println("INFORMATION");
        System.out.println("-----------");
        System.out.println();
        System.out.println(String.join(", ", Command.shorthands.get("help")));
        System.out.println("- Print this help message.");
        System.out.println("Usage: " + Main.COMMAND_PREFIX + "help");
        System.out.println();
        System.out.println(String.join(", ", Command.shorthands.get("output")));
        System.out.println("- Print station and its adjacent stations (for use in car displays).");
        System.out.println("Usage: " + Main.COMMAND_PREFIX + "output <line name> <station name>");
        System.out.println();
        System.out.println(String.join(", ", Command.shorthands.get("metro")));
        System.out.println("- Print metro.");
        System.out.println("Usage: " + Main.COMMAND_PREFIX + "metro");
        System.out.println();
        System.out.println(String.join(", ", Command.shorthands.get("metroinfo")));
        System.out.println("- Print metro info.");
        System.out.println("Usage: " + Main.COMMAND_PREFIX + "metroinfo");
        System.out.println();
        System.out.println(String.join(", ", Command.shorthands.get("lineinfo")));
        System.out.println("- Print metro line info.");
        System.out.println("Usage: " + Main.COMMAND_PREFIX + "lineinfo <line name>");
        System.out.println();
        System.out.println(String.join(", ", Command.shorthands.get("stationinfo")));
        System.out.println("- Print metro station info.");
        System.out.println("Usage: " + Main.COMMAND_PREFIX + "stationinfo <line name> <station name>");
        System.out.println();
        System.out.println(String.join(", ", Command.shorthands.get("findstation")));
        System.out.println("- Search for a station by its name. Case sensitive.");
        System.out.println("Usage: " + Main.COMMAND_PREFIX + "findstation <search term>");
        System.out.println();
        System.out.println(String.join(", ", Command.shorthands.get("fastestroutes")));
        System.out.println("- Print fastest times from metro station to all other metro stations. Uses Dijkstra algorithm.");
        System.out.println("Usage: " + Main.COMMAND_PREFIX + "fastestroutes <line name> <station name>");
        System.out.println();
        System.out.println("------");
        System.out.println("ROUTES");
        System.out.println("------");
        System.out.println();
        System.out.println(String.join(", ", Command.shorthands.get("cycles")));
        System.out.println("- Print cycles found in each line of current metro. Uses variation of BFS algorithm.");
        System.out.println("Usage: " + Main.COMMAND_PREFIX + "cycles");
        System.out.println();
        System.out.println(String.join(", ", Command.shorthands.get("routes")));
        System.out.println("- Find and print all possible routes between two stations if before timeout is reached (default=10sec). Uses variation of BFS algorithm.");
        System.out.println("Usage: " + Main.COMMAND_PREFIX + "routes <line from name> <station from name> <line to name> <station to name> <max route length>");
        System.out.println();
        System.out.println(String.join(", ", Command.shorthands.get("route")));
        System.out.println("- Find and print route between two stations with least amount of hops. Transfer to another line is not considered as a hop. Uses BFS algorithm.");
        System.out.println("Usage: " + Main.COMMAND_PREFIX + "route <line from name> <station from name> <line to name> <station to name>");
        System.out.println();
        System.out.println(String.join(", ", Command.shorthands.get("fastestroute")));
        System.out.println("- Find and print fastest route between two stations. Uses Dijkstra algorithm.");
        System.out.println("Usage: " + Main.COMMAND_PREFIX + "route <line from name> <station from name> <line to name> <station to name>");
        System.out.println();
    }
}

